{"version":3,"sources":["api.js","components/SearchBar.jsx","components/Item.jsx","components/ItemsList.jsx","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","SEARCH_URL","TRENDING_URL","REACT_APP_API_KEY","a","params","URLSearchParams","set","url","toString","fetch","res","json","console","log","data","query","offset","limit","rating","SearchBar","onSubmit","useState","setQuery","handleSubmit","useCallback","type","onChange","e","target","value","placeholder","class","onClick","Item","item","title","downsized_medium","images","handleClick","className","src","alt","ItemsList","items","isModalShown","setModalShown","currentImageData","setCurrentImageData","handleImageClick","imageData","map","id","visible","onCancel","original","webp","username","App","setItems","useEffect","getTrendingItem","then","searchItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAEMA,EAAW,gCACXC,EAAU,UAAMD,EAAN,WACVE,EAAY,UAAMF,EAAN,aACZG,EAAoB,mC,4CAGnB,kCAAAC,EAAA,6DACGC,EAAS,IAAIC,iBACZC,IAAI,UAAWJ,GAChBK,EAHH,UAGYN,EAHZ,YAG4BG,EAAOI,YAHnC,kBAMmBC,MAAMF,GANzB,cAMOG,EANP,gBAOcA,EAAIC,OAPlB,OAOCA,EAPD,yDASCC,QAAQC,IAAR,MATD,iCAWIF,EAAKG,MAXT,2D,kEAeA,mDAAAX,EAAA,iEAA6BY,aAA7B,MAAmC,GAAnC,MAAuCC,cAAvC,MAA8C,EAA9C,MAAiDC,aAAjD,MAAwD,GAAxD,MAA4DC,cAA5D,MAAmE,IAAnE,EACGd,EAAS,IAAIC,gBAChBU,GACCX,EAAOE,IAAI,IAAKS,GAEpBX,EAAOE,IAAI,SAAUU,EAAOR,YAC5BJ,EAAOE,IAAI,QAASW,EAAMT,YAC1BJ,EAAOE,IAAI,SAAUY,GACrBd,EAAOE,IAAI,UAAWJ,GAChBK,EATH,UASYP,EATZ,YAS0BI,EAAOI,YATjC,mBAYmBC,MAAMF,GAZzB,eAYOG,EAZP,iBAacA,EAAIC,OAblB,QAaCA,EAbD,yDAeKC,QAAQC,IAAR,MAfL,iCAkBIF,EAAKG,MAlBT,2D,iCCrBQ,SAASK,EAAT,GAAiC,IAAZC,EAAW,EAAXA,SAAW,EACjBC,mBAAS,IADQ,mBACpCN,EADoC,KAC7BO,EAD6B,KAOrCC,EAAeC,uBAAY,WAC7BJ,EAASL,KACV,CAACA,EAAOK,IAEX,OACI,gCACI,uBAAOK,KAAK,OAAOC,SAVN,SAACC,GAClBL,EAASK,EAAEC,OAAOC,QAS6BC,YAAa,sBACxD,wBAAQC,MAAM,SAASC,QAAST,EAAhC,wB,YCbI,SAASU,EAAT,GAAiC,IAAjBC,EAAgB,EAAhBA,KAAMF,EAAU,EAAVA,QAC3BG,EAAqCD,EAArCC,MAAgBC,EAAqBF,EAA9BG,OAASD,iBAEjBE,EAAcd,uBAAY,SAACG,GAAD,OAAOK,EAAQE,KAAO,CAACA,IACvD,OAEA,qBAAKK,UAAW,OAAQP,QAASM,EAAjC,SACQ,qBAAKC,UAAW,cAAeC,IAAKJ,EAAiB7B,IAAMkC,IAAKN,MCN7D,SAASO,EAAT,GAA8B,IAAD,IAARC,EAAQ,EAARA,MAAQ,EACFtB,oBAAS,GADP,mBACjCuB,EADiC,KACnBC,EADmB,OAEQxB,mBAAS,IAFjB,mBAEjCyB,EAFiC,KAEfC,EAFe,KAIlCC,EAAmBxB,uBAAY,SAACyB,GAClCJ,GAAc,GACdE,EAAoBE,KACrB,IACH,OACI,qCACA,qBAAKV,UAAW,YAAhB,SACKI,EAAMO,KAAI,SAAAhB,GAAI,OAAI,cAACD,EAAD,CAAoBD,QAASgB,EAAkBd,KAAMA,GAA1CA,EAAKiB,SAEnC,eAAC,IAAD,CAAOC,QAASR,EAAcT,MAAOW,EAAiBX,MAAOkB,SAAU,kBAAMR,GAAc,IAA3F,UACI,qBAAKN,UAAW,cAAeC,IAAG,UAAEM,EAAiBT,cAAnB,iBAAE,EAAyBiB,gBAA3B,aAAE,EAAmCC,KAAMd,IAAKK,EAAiBX,QACnG,0CAAY,+BAAOW,EAAiBU,cACpC,yCAAW,+BAAOV,EAAiB5B,kBCQpCuC,MApBf,WAAgB,IAAD,EACepC,mBAAS,IADxB,mBACJsB,EADI,KACGe,EADH,KAGXC,qBAAU,YJHP,WAAP,gCIIQC,GAAkBC,KAAKH,KACxB,IAGH,IAAMnC,EAAeC,uBAAY,SAACT,GAAD,OJO9B,SAAP,kCIPgD+C,CAAY,CAAC/C,UAAQ8C,KAAKH,KAAW,IAEnF,OACE,qBAAKnB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACI,cAAC,EAAD,CAAWnB,SAAUG,IACrB,cAACmB,EAAD,CAAWC,MAAOA,UCVboB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ca4475ad.chunk.js","sourcesContent":["\n\nconst BASE_URL = 'https://api.giphy.com/v1/gifs'\nconst SEARCH_URL = `${BASE_URL}/search`\nconst TRENDING_URL = `${BASE_URL}/trending`\nconst REACT_APP_API_KEY = 'tVaJe9QRTL6VZp9xhBkogbNWFTI9hYnJ'\n\n\nexport async function getTrendingItem () {\n    const params = new URLSearchParams()\n    params.set('api_key', REACT_APP_API_KEY)\n    const url = `${TRENDING_URL}?${params.toString()}`\n    let json\n    try {\n        const res = await fetch(url)\n        json = await res.json()\n    } catch(err) {\n        console.log(err)\n    }\n    return json.data\n}\n\n//id, title, url, embed_url, images: {original}, username\nexport async function searchItems ({query='', offset=0, limit= 10, rating='g'}) {\n    const params = new URLSearchParams()\n    if(query) {\n        params.set('q', query)\n    }\n    params.set('offset', offset.toString())\n    params.set('limit', limit.toString())\n    params.set('rating', rating)\n    params.set('api_key', REACT_APP_API_KEY)\n    const url = `${SEARCH_URL}?${params.toString()}`\n    let json\n    try {\n        const res = await fetch(url)\n        json = await res.json()\n    } catch(err) {\n            console.log(err)\n    }\n\n    return json.data\n\n\n}","import React, { useState, useCallback } from \"react\";\n\nexport default function SearchBar ({onSubmit}) {\n    const [query, setQuery] = useState('')\n\n    const handleChange = (e) => {\n        setQuery(e.target.value)\n    }\n\n    const handleSubmit = useCallback(() => {\n        onSubmit(query)\n    }, [query, onSubmit])\n\n    return (\n        <div>\n            <input type=\"text\" onChange={handleChange} placeholder={'please input text'}/>\n            <button class=\"button\" onClick={handleSubmit}> Search</button>\n        </div>\n    )\n}","\nimport React, { useCallback } from \"react\";\n\nexport default  function Item ({item, onClick}) {\n    const {title, images: {downsized_medium}} = item\n\n    const handleClick = useCallback((e) => onClick(item), [item])\n    return (\n       \n    <div className={'Item'} onClick={handleClick}>\n            <img className={'Item__Image'} src={downsized_medium.url}  alt={title}/>\n    </div>\n               \n       \n    )\n}","import React, {useCallback, useState} from \"react\";\nimport { Modal } from 'antd';\nimport Item from './Item'\n\nexport default function ItemsList ({items}) {\n    const [isModalShown, setModalShown] = useState(false)\n    const [currentImageData, setCurrentImageData] = useState({})\n\n    const handleImageClick = useCallback((imageData) => {\n        setModalShown(true)\n        setCurrentImageData(imageData)\n    }, [])\n    return (\n        <>\n        <div className={'ItemsList'}>\n            {items.map(item => <Item key={item.id} onClick={handleImageClick} item={item}/>)}\n        </div>\n            <Modal visible={isModalShown} title={currentImageData.title} onCancel={() => setModalShown(false)}>\n                <img className={'Item__Image'} src={currentImageData.images?.original?.webp} alt={currentImageData.title}/>\n                <h4>Author: <span>{currentImageData.username}</span></h4>\n                <p>Rating: <span>{currentImageData.rating}</span></p>\n            </Modal>\n        </>\n    )\n}","import 'antd/dist/antd.css';\nimport './App.css';\nimport { getTrendingItem, searchItems} from \"./api\";\nimport Searchbar from './components/SearchBar'\nimport ItemsList from './components/ItemsList'\nimport {useCallback, useEffect, useState} from \"react\";\n\n\nfunction App() {\n    const [items ,setItems] = useState([])\n\n    useEffect(() => {\n        getTrendingItem().then(setItems)\n    }, [])\n\n\n    const handleSubmit = useCallback((query) => searchItems({query}).then(setItems), [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Searchbar onSubmit={handleSubmit}/>\n          <ItemsList items={items}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}